assert(load(Base64Decode("bG9jYWwgdmVyc2lvbiA9ICIxLjMiDQpsb2NhbCBBVVRPVVBEQVRFID0gdHJ1ZQ0KbG9jYWwgVVBEQVRFX0hPU1QgPSAicmF3LmdpdGh1Yi5jb20iDQpsb2NhbCBVUERBVEVfUEFUSCA9ICIvc3pjenVyZWtQUk9TL0dpdEh1Yi9tYXN0ZXIvc2NyaXB0cy9zb3Jha2FCT1QgLSBRdWVlbiBPZiBUaGUgRGFyay5sdWEiLi4iP3JhbmQ9Ii4ubWF0aC5yYW5kb20oMSwxMDAwMCkNCmxvY2FsIFVQREFURV9GSUxFX1BBVEggPSBTQ1JJUFRfUEFUSC4uInNvcmFrYUJPVCAtIFF1ZWVuIE9mIFRoZSBEYXJrLmx1YSINCmxvY2FsIFVQREFURV9VUkwgPSAiaHR0cHM6Ly8iLi5VUERBVEVfSE9TVC4uVVBEQVRFX1BBVEgNCg0KZnVuY3Rpb24gX0F1dG91cGRhdGVyTXNnKG1zZykgcHJpbnQoIjxmb250IGNvbG9yPVwiIzY2NjY2NlwiPjxiPnNvcmFrYUJPVCAtIFF1ZWVuIE9mIFRoZSBEYXJrOjwvYj48L2ZvbnQ+IDxmb250IGNvbG9yPVwiI0ZGRkZGRlwiPiIuLm1zZy4uIi48L2ZvbnQ+IikgZW5kDQppZiBBVVRPVVBEQVRFIHRoZW4NCiAgICAgICAgbG9jYWwgU2VydmVyRGF0YSA9IEdldFdlYlJlc3VsdChVUERBVEVfSE9TVCwgIi9zemN6dXJla1BST1MvR2l0SHViL21hc3Rlci9zY3JpcHRzL1ZlcnNpb24vc29yYWthQk9UIC0gUXVlZW4gT2YgVGhlIERhcmsiKQ0KICAgICAgICBpZiBTZXJ2ZXJEYXRhIHRoZW4NCiAgICAgICAgICAgICAgICBTZXJ2ZXJWZXJzaW9uID0gdHlwZSh0b251bWJlcihTZXJ2ZXJEYXRhKSkgPT0gIm51bWJlciIgYW5kIHRvbnVtYmVyKFNlcnZlckRhdGEpIG9yIG5pbA0KICAgICAgICAgICAgICAgIGlmIFNlcnZlclZlcnNpb24gdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgdG9udW1iZXIodmVyc2lvbikgPCBTZXJ2ZXJWZXJzaW9uIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX0F1dG91cGRhdGVyTXNnKCJOZXcgdmVyc2lvbiBhdmFpbGFibGUiLi5TZXJ2ZXJWZXJzaW9uKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfQXV0b3VwZGF0ZXJNc2coIlVwZGF0aW5nLCBwbGVhc2UgZG9uJ3QgcHJlc3MgRjkhIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVsYXlBY3Rpb24oZnVuY3Rpb24oKSBEb3dubG9hZEZpbGUoVVBEQVRFX1VSTCwgVVBEQVRFX0ZJTEVfUEFUSCwgZnVuY3Rpb24gKCkgX0F1dG91cGRhdGVyTXNnKCJTdWNjZXNzZnVsbHkgdXBkYXRlZC4gKCIuLnZlcnNpb24uLiIgPT4gIi4uU2VydmVyVmVyc2lvbi4uIiksIHByZXNzIEY5IHR3aWNlIHRvIGxvYWQgdGhlIHVwZGF0ZWQgdmVyc2lvbi4iKSBlbmQpIGVuZCwgMykNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX0F1dG91cGRhdGVyTXNnKCJZb3UgaGF2ZSBnb3QgdGhlIGxhdGVzdCB2ZXJzaW9uICgiLi5TZXJ2ZXJWZXJzaW9uLi4iKSIpDQogICAgICAgICAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgZWxzZQ0KICAgICAgICAgICAgICAgIF9BdXRvdXBkYXRlck1zZygiRXJyb3IgZG93bmxvYWRpbmcgdmVyc2lvbiBpbmZvISIpDQogICAgICAgIGVuZA0KZW5kDQoNCmxvY2FsIEF1dGhMaXN0ID0geyJzemN6dXJlayIsIlRoZUJ1bWVrIiwiYXdlc29tZXNlYmEiLCJEaWFibG94RFBMIn0gLS1bW1RhYmxlIG9mIHVzZXJzIHdobyB5b3Ugd2lzaCB0byB1c2UgdGhlIHNjcmlwdC5dXQ0KbG9jYWwgVXNlciA9IHN0cmluZy5sb3dlcihHZXRVc2VyKCkpIC0tW1tDYWxscyB0aGUgR2V0VXNlcigpIGZ1bmN0aW9uIG9uY2UgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5dXQ0KZnVuY3Rpb24gQXV0aCgpDQpmb3IgaSwgdXNlcnMgaW4gcGFpcnMoQXV0aExpc3QpIGRvIC0tW1tGb3IgbG9vcCB0byBjb21wYXJlIHRoZSB1c2VybmFtZXMuXV0NCmlmIHN0cmluZy5sb3dlcih1c2VycykgPT0gVXNlciB0aGVuIC0tW1tDaGVja3MgaWYgdGhlIHVzZXJuYW1lcyBtYXRjaC5dXQ0KcmV0dXJuIHRydWUgLS1bW0F1dGhlbnRpY2F0ZXMgdGhlIHVzZXIgaWYgdGhlIHVzZXJuYW1lcyBtYXRjaC5dXQ0KZW5kDQplbmQNCnJldHVybiBmYWxzZSAtLVtbSWYgdGhlIHVzZXJuYW1lcyBkb24ndCBtYXRjaCBhZnRlciB0aGUgZm9yIGxvb3AgaXMgY29tcGxldGVkLCB0aGUgc2NyaXB0IGRvZXNuJ3QgYXV0aGVudGljYXRlIHlvdS5dXQ0KZW5kDQppZiBub3QgQXV0aCgpIHRoZW4gcHJpbnQoIk5vdCBBdXRoZW50aWNhdGVkIikgcmV0dXJuIGVuZCAtLVtbVGVsbHMgdGhlIHVzZXIgdGhhdCB0aGV5IGNhbid0IHVzZSB0aGUgc2NyaXB0Ll1dDQpwcmludCgiQXV0aGVudGljYXRlZCBhcyAiLi5Vc2VyKSAtLVtbVGVsbHMgdGhlIHVzZXIga25vdyB0aGF0IHRoZXkgY2FuIHVzZSB0aGUgc2NyaXB0Ll1dDQotLVtbUGxhY2UgeW91ciBzY3JpcHQgY29kZSBoZXJlLl1dLS0NCg0KbG9jYWwgSEsgPSAxMTQgLS0gMTE0IGlzIEYzDQpsb2NhbCB3YXJkUmFuZ2UgPSA2MDANCg0KZmluaXNoZWRPbkxvYWQgPSBmYWxzZQ0KaW5pdGlhdGVkID0gZmFsc2UNCkZvbGxvd0tleXNUZXh0ID0geyJGNSIsICJGNiIsICJGNyIsICJGOCJ9IC0tS2V5IG5hbWVzIGZvciBtZW51DQpGb2xsb3dLZXlzQ29kZXMgPSB7MTE2LDExNywxMTgsMTE5fSAtLURlY2ltYWwga2V5IGNvZGVzIGNvcnJlc3Nwb25kaW5nIHRvIGtleSBuYW1lcw0KU2V0dXBEcmF3WCA9IDAuMQ0KU2V0dXBEcmF3WSA9IDAuMTUNCk1lbnVUZXh0U2l6ZSA9IDE4DQphbGxpZXMgPSB7fQ0KDQotLVRyYWNraW5nIEFyZWEgRE9OVCBDSEFOR0UNCkhXSUQgPSBCYXNlNjRFbmNvZGUodG9zdHJpbmcob3MuZ2V0ZW52KCJQUk9DRVNTT1JfSURFTlRJRklFUiIpLi5vcy5nZXRlbnYoIlVTRVJOQU1FIikuLm9zLmdldGVudigiQ09NUFVURVJOQU1FIikuLm9zLmdldGVudigiUFJPQ0VTU09SX0xFVkVMIikuLm9zLmdldGVudigiUFJPQ0VTU09SX1JFVklTSU9OIikpKQ0KaWQgPSAyNjQNClNjcmlwdE5hbWUgPSAiR2VuZXJpY0ZvbGxvd0FuZFdhbGsiDQoNCmFzc2VydChsb2FkKEJhc2U2NERlY29kZSgiRzB4MVlWSUFBUVFFQkFnQUdaTU5DaG9LQUFBQUFBQUFBQUFBQVFJREFBQUFKUUFBQUFnQUFJQWZBSUFBQVFBQUFBUUtBQUFBVlhCa1lYUmxWMlZpQUFFQUFBQUNBQUFBREFBQUFBUUFFVFVBQUFBR0FVQUFRVUVBQUIyQkFBRkdnVUFBaDhGQUFwMEJnQUJkZ1FBQWpBSEJBZ0ZDQVFCQmdnRUFuVUVBQWhzQUFBQVh3QU9Bak1IQkFnRUNBZ0JBQWdBQmdVSUNBTUFDZ0FFQmd3SUFSc05DQUVjRHd3YUFBNEFBd1VNREFBR0VBd0JkZ3dBQ2djTURBQmFDQXdTZFFZQUJGNEFEZ0l6QndRSUJBZ1FBUUFJQUFZRkNBZ0RBQW9BQkFZTUNBRWJEUWdCSEE4TUdnQU9BQU1GREF3QUJoQU1BWFlNQUFvSERBd0FXZ2dNRW5VR0FBWXdCeFFJQlFnVUFuUUdCQVFnQWdva0l3QUdKQ0lDQmlJeUJ4UUtkUVFBQkh3Q0FBQmNBQUFBRUNBQUFBSEpsY1hWcGNtVUFCQWNBQUFCemIyTnJaWFFBQkFjQUFBQmhjM05sY25RQUJBUUFBQUIwWTNBQUJBZ0FBQUJqYjI1dVpXTjBBQVFRQUFBQVltOXNMWFJ5WVdOclpYSXVZMjl0QUFNQUFBQUFBQUJVUUFRRkFBQUFjMlZ1WkFBRUdBQUFBRWRGVkNBdmNtVnpkQzl1Wlhkd2JHRjVaWEkvYVdROUFBUUhBQUFBSm1oM2FXUTlBQVFOQUFBQUpuTmpjbWx3ZEU1aGJXVTlBQVFIQUFBQWMzUnlhVzVuQUFRRkFBQUFaM04xWWdBRURRQUFBRnRlTUMwNVFTMWFZUzE2WFFBRUFRQUFBQUFFSlFBQUFDQklWRlJRTHpFdU1BMEtTRzl6ZERvZ1ltOXNMWFJ5WVdOclpYSXVZMjl0RFFvTkNnQUVHd0FBQUVkRlZDQXZjbVZ6ZEM5a1pXeGxkR1Z3YkdGNVpYSS9hV1E5QUFRQ0FBQUFjd0FFQndBQUFITjBZWFIxY3dBRUNBQUFBSEJoY25ScFlXd0FCQWdBQUFCeVpXTmxhWFpsQUFRREFBQUFLbUVBQkFZQUFBQmpiRzl6WlFBQUFBQUFBUUFBQUFBQUVBQUFBRUJ2WW1aMWMyTmhkR1ZrTG14MVlRQTFBQUFBQWdBQUFBSUFBQUFDQUFBQUFnQUFBQUlBQUFBQ0FBQUFBZ0FBQUFNQUFBQURBQUFBQXdBQUFBTUFBQUFFQUFBQUJBQUFBQVVBQUFBRkFBQUFCUUFBQUFZQUFBQUdBQUFBQndBQUFBY0FBQUFIQUFBQUJ3QUFBQWNBQUFBSEFBQUFCd0FBQUFnQUFBQUhBQUFBQlFBQUFBZ0FBQUFKQUFBQUNRQUFBQWtBQUFBS0FBQUFDZ0FBQUFzQUFBQUxBQUFBQ3dBQUFBc0FBQUFMQUFBQUN3QUFBQXNBQUFBTUFBQUFDd0FBQUFrQUFBQU1BQUFBREFBQUFBd0FBQUFNQUFBQURBQUFBQXdBQUFBTUFBQUFEQUFBQUF3QUFBQUdBQUFBQWdBQUFHRUFBQUFBQURVQUFBQUNBQUFBWWdBQUFBQUFOUUFBQUFJQUFBQmpBQUFBQUFBMUFBQUFBZ0FBQUdRQUFBQUFBRFVBQUFBREFBQUFYMkVBQXdBQUFEVUFBQUFEQUFBQVlXRUFCd0FBQURVQUFBQUJBQUFBQlFBQUFGOUZUbFlBQVFBQUFBRUFFQUFBQUVCdlltWjFjMk5oZEdWa0xteDFZUUFEQUFBQURBQUFBQUlBQUFBTUFBQUFBQUFBQUFFQUFBQUZBQUFBWDBWT1ZnQT0iKSwgbmlsLCAiYnQiLCBfRU5WKSkoKQ0KDQotLUNsYXNzZXMgQXJlYQ0Kcm9vdCA9IG5pbA0KLS1UYXNrIENsYXNzDQpUYXNrID0ge30NCg0KLS1Ob3RoaW5nDQpsb2NhbCBzY3JpcHRBY3RpdmUgPSB0cnVlDQpsb2NhbCB3YXJkVGltZXIgPSAwDQpsb2NhbCB3YXJkU2xvdCA9IG5pbA0KbG9jYWwgd2FyZE1hdHJpeCA9IHt9DQpsb2NhbCB3YXJkRGV0ZWN0ZWRGbGFnID0ge30NCmxvY2FsIGxhc3RXYXJkID0gMA0Kd2FyZE1hdHJpeFsxXSA9IHsxMDAwMCwxMTU3OCwxMDAxMiw4OTI0LDc5MTYsMTEzNjksNjE4NSw0OTExLDQwMjUsMjU3OSw0MDMxLDI3ODh9DQp3YXJkTWF0cml4WzJdID0gezI4NjgsMzQ1Miw0ODQyLDU0NjEsNDU5NSw2ODg1LDk4NTYsODg3OCw5NjIxLDEwOTQzLDExNTE5LDc2MTF9DQp3YXJkTWF0cml4WzNdID0ge30NCmZvciBpID0gMSwgMTIgZG8NCi0tV2FyZCBwcmVzZW50IG5lYXJieSA/DQp3YXJkTWF0cml4WzNdW2ldID0gZmFsc2UNCndhcmREZXRlY3RlZEZsYWdbaV0gPSBmYWxzZQ0KZW5kDQoNCiAgICAtLUF1dG8gUG90aW9uLS0NCiAgICBNUG90VXNlZCA9IGZhbHNlDQogICAgSFBvdFVzZWQgPSBmYWxzZQ0KICAgIG1hbmFMaW1pdCA9IDAuMzUNCiAgICBocExpbWl0ID0gMC41Mw0KICAgIGxhc3RUaW1lTVBvdCA9IDANCiAgICBsYXN0VGltZUhQb3QgPSAwDQoJCQ0KLS1wcmVzcyB0aGlzIGtleSBmb3Igc3BlbGwgc2V0dGluZ3MoU2hpZnQgZGVmYXVsdCkNCiAgICBkZXNpcmVkR3VpS2V5ID0gMHgxMA0KICAgIC0tc29yYWthIHdpbGwgaGVhbCB0YXJnZXQgdXAgdG8gdGhpcyBwZXJjZW50DQogICAgZGVzaXJlZEhlYWwgPSAwLjc1DQogICAgLS1zb3Jha2Egd2lsbCByZXBlbG5pc2ggdGFyZ2V0IG1hbmEgdXAgdG8gdGhpcyBwZXJjZW50DQogICAgZGVzaXJlZFJlcGxlbmlzaCA9IDAuNzQNCiAgICAtLXNvcmFrYSB3aWxsIHVsdCB0ZWFtbWF0ZXMgdXAgdG8gdGhpcyBwZXJjZW50DQogICAgZGVzaXJlZFVsdCA9IDAuODANCiAgICAtLXNvcmFrYSB3aWxsIHVzZSBzdW1tb25lcnMNCiAgICBkZXNpcmVkU3VtbW9uZXJzID0gdHJ1ZQ0KICAgIC0tZW5hYmxlIGF1dG9idXkgaXRlbXMgZnJvbSBsaXN0DQogICAgZGVzaXJlZEl0ZW1zID0gdHJ1ZQ0KICAgIC0tSXRlbSBMaXN0DQoJLS1bWyBDb25maWcgXV0NCglzaG9wTGlzdCA9IHsyMDA0LCAyMDA0LCAxMDA2LCAxMDA0LCAzMDk2LCAxMDAxLCAxMDI4LCAzMTU4LCAzMDY3LCAzMDY5LCAxMDI4LCAzMTA1LCAzMTkwLCAxMDI4LCAzMDEwLCAzMDI3LCAzMDY1fQ0KDQoJbmV4dGJ1eUluZGV4ID0gMQ0KCXdhcmRCb3VnaHQgPSAwDQoJZmlyc3RCb3VnaHQgPSBmYWxzZQ0KCWxhc3RCdXkgPSAwDQoJDQoJYnV5RGVsYXkgPSAxMDAgLS1kZWZhdWx0IDEwMA0KICAgIC0tZW5hYmxlIGxldmVsIHNwZWxscyBmcm9tIGFycmF5IGJlbGxvdw0KICAgIGRlc2lyZWRMZXZlbCA9IHRydWUNCiAgICAtLWxldmVsIHNlcXVlbmNlDQogICAgc3BlbGxzID0ge19XLF9FLF9XLF9RLF9FLF9SLF9XLF9RLF9XLF9FLF9SLF9FLF9RLF9FLF9XLF9SLF9RLF9RfQ0KICAgIC0td2FyZHMNCiAgICB3YXJkcyA9IHt7eD0xMDAwMCx6PTI4NjB9LHt4PTQwMDAsej0xMTYwMH0se3g9NDgwMCx6PTg5MjV9LHt4PTkxMjUsej01MzE1fSx7eD0xMTQ1MCx6PTY5OTB9LHt4PTY3MzUsej0yOTI1fSx7eD0yNjE1LHo9NzUwMH0se3g9NzMwMCx6PTExNDkwfX0NCiAgICAtLXRlYW0gZGVwZW5kZW50IHdhcmRzDQogICAgaWYgbXlIZXJvLnRlYW0gPT0gVEVBTV9CTFVFIHRoZW4NCiAgICAgICAgICAgIHdhcmRzWyN3YXJkcyArIDFdID0ge3g9MTMyNjAsej0yOTEwfQ0KICAgICAgICAgICAgd2FyZHNbI3dhcmRzICsgMV0gPSB7eD0yNTUwLHo9MTM0NTB9DQogICAgZWxzZQ0KICAgICAgICAgICAgd2FyZHNbI3dhcmRzICsgMV0gPSB7eD0xMTY3NSx6PTExMDB9DQogICAgICAgICAgICB3YXJkc1sjd2FyZHMgKyAxXSA9IHt4PTkzNSx6PTEyMjQ1fQ0KICAgIGVuZA0KDQppZiBteUhlcm8uY2hhck5hbWUgfj0gIlNvcmFrYSIgdGhlbiByZXR1cm4gZW5kDQoNCiAgICAtLWZpeCBidWdzcGxhdCBmb3Igbm93DQogICAgSXNXYWxsT2ZHcmFzcyA9IGZ1bmN0aW9uKCkgcmV0dXJuIDAgZW5kDQogICAgDQogICAgcmVxdWlyZSAiQUlEYXRhIg0KICAgIHJlcXVpcmUgIkFJUm91dGluZSINCiAgICByZXF1aXJlICJBSVRpbWVyIg0KICAgIHJlcXVpcmUgIkFJRmluZCINCiAgICByZXF1aXJlICJBSUd1aSINCiAgICByZXF1aXJlICJBSVN0YXQiDQogICAgcmVxdWlyZSAiQUlDb25kaXRpb24iDQogICAgcmVxdWlyZSAiQUlTcGVsbCINCg0KDQpmdW5jdGlvbiBUYXNrOm5ldyhvKQ0KCW8gPSBvIG9yIHt9ICAgLS0gY3JlYXRlIG9iamVjdCBpZiB1c2VyIGRvZXMgbm90IHByb3ZpZGUgb25lDQoJc2V0bWV0YXRhYmxlKG8sIHNlbGYpDQoJc2VsZi5fX2luZGV4ID0gc2VsZg0KCXJldHVybiBvDQplbmQNCg0KZnVuY3Rpb24gVGFzazpydW4oKQ0KCVByaW50Q2hhdCgiQ0hBTU9VIFRBU0sgUlVOIikNCmVuZA0KDQpmdW5jdGlvbiBUYXNrOmFkZENoaWxkKHZhbHVlKQ0KCXRhYmxlLmluc2VydChzZWxmLHZhbHVlKQ0KZW5kDQoNCmZ1bmN0aW9uIFRhc2s6YWRkQWxsKHZhbHVlKQ0KCWZvciBpID0gMSwgI3ZhbHVlLCAxIGRvDQoJCXRhYmxlLmluc2VydChzZWxmLCB2YWx1ZVtpXSkNCgllbmQNCmVuZA0KDQpmdW5jdGlvbiBUYXNrOnByaW50QWxsKCkNCglmb3IgaSA9IDEsICNzZWxmLCAxIGRvDQoJCVByaW50Q2hhdCgiVmFsdWU6ICIuLnNlbGZbaV0pDQoJZW5kDQplbmQNCg0KDQotLVtbU2VsZWN0b3IgQ2xhc3NdXS0tDQoNClNlbGVjdG9yID0gVGFzazpuZXcoKQ0KDQpmdW5jdGlvbiBTZWxlY3RvcjpydW4oKQ0KCWZvciBpLCB2IGluIGlwYWlycyhzZWxmKSBkbw0KCQlpZiB2OnJ1bigpIHRoZW4gcmV0dXJuIHRydWUgZW5kDQoJZW5kDQoJcmV0dXJuIGZhbHNlDQplbmQNCg0KDQotLVtbU2VxdWVuY2UgQ2xhc3NdXS0tDQoNClNlcXVlbmNlID0gVGFzazpuZXcoKQ0KDQpmdW5jdGlvbiBTZXF1ZW5jZTpydW4oKQ0KCWZvciBpLCB2IGluIGlwYWlycyhzZWxmKSBkbw0KCQlpZiBub3QgdjpydW4oKSB0aGVuIHJldHVybiBmYWxzZSBlbmQNCgllbmQNCglyZXR1cm4gdHJ1ZQ0KZW5kDQoNCg0KLS1bW0FjdGlvbiBDbGFzc11dLS0NCg0KQWN0aW9uID0gVGFzazpuZXcoKQ0KDQpmdW5jdGlvbiBBY3Rpb246cnVuKCkNCglsb2NhbCBhY3Rpb25zID0ge30NCglQcmludENoYXQoc2VsZi5hY3Rpb24pDQoJDQoJYWN0aW9uc1sic3RhcnRUaW1lIl0gPSBmdW5jdGlvbigpDQoJCWlmIG9zLmNsb2NrKCkgPiBTQ1JJUFRfU1RBUlRfVElNRSB0aGVuIHJldHVybiB0cnVlDQoJCWVsc2UgcmV0dXJuIGZhbHNlIGVuZA0KCWVuZA0KCQ0KCWFjdGlvbnNbIm5vUGFydG5lciJdID0gZnVuY3Rpb24oKQ0KCQktLWlmKHBhcnRuZXIgfj0gbmlsKSB0aGVuIFByaW50Q2hhdChwYXJ0bmVyLm5hbWUpIGVuZA0KCQlpZiBwYXJ0bmVyID09IG5pbCB0aGVuIHJldHVybiB0cnVlDQoJCWVsc2UgcmV0dXJuIGZhbHNlDQoJCWVuZA0KCWVuZA0KCQ0KCWFjdGlvbnNbInBhcnRuZXJBZmsiXSA9IGZ1bmN0aW9uKCkNCgkJY2hlY2tBZmsoKQ0KCQlpZiBwQWZrIHRoZW4gcGFydG5lciA9IG5pbCBlbmQNCgkJcmV0dXJuIHBBZmsNCgllbmQNCgkNCglhY3Rpb25zWyJwYXJ0bmVyQWxpdmUiXSA9IGZ1bmN0aW9uKCkNCgkJaWYgcGFydG5lciB+PSBuaWwgYW5kIG5vdCBwYXJ0bmVyLmRlYWQgdGhlbiByZXR1cm4gdHJ1ZQ0KCQllbHNlIHJldHVybiBmYWxzZQ0KCQllbmQNCgllbmQNCgkNCglhY3Rpb25zWyJwYXJ0bmVyRGVhZCJdID0gZnVuY3Rpb24oKQ0KCQlpZiBwYXJ0bmVyIH49IG5pbCBhbmQgIHBhcnRuZXIuZGVhZCB0aGVuIHJldHVybiB0cnVlDQoJCWVsc2UgcmV0dXJuIGZhbHNlDQoJCWVuZA0KCWVuZA0KCQ0KCWFjdGlvbnNbInBhcnRuZXJDbG9zZSJdID0gZnVuY3Rpb24oKQ0KCQlpZiBwbGF5ZXI6R2V0RGlzdGFuY2UocGFydG5lcikgPD0gY29uZmlnLmZvbGxvd0NoYW1wLmZvbGxvd0Rpc3QgdGhlbiByZXR1cm4gdHJ1ZQ0KCQllbHNlIHJldHVybiBmYWxzZQ0KCQllbmQNCgllbmQNCgkNCgktLVRPRE86IEltcGxlbWVudHMNCglhY3Rpb25zWyJmb2xsb3dGcmllbmQiXSA9IGZ1bmN0aW9uKCkNCgkJDQoJZW5kDQoJDQoJYWN0aW9uc1siZnJpZW5kQ2xvc2UiXSA9IGZ1bmN0aW9uKCkNCgkJbG9jYWwgZnJpZW5kcyA9IEdldFBsYXllcnMocGxheWVyLnRlYW0sIGZhbHNlLCBmYWxzZSkNCgkJbG9jYWwgY2xvc2VzdCA9IGZyaWVuZHNbMV0NCgkJZm9yIGkgPSAxLCAjZnJpZW5kcywgMSBkbw0KCQkJaWYgZnJpZW5kc1tpXSB+PSBuaWwgYW5kIHBsYXllcjpHZXREaXN0YW5jZShmcmllbmRzW2ldKSA8IHBsYXllcjpHZXREaXN0YW5jZShjbG9zZXN0KSB0aGVuIGNsb3Nlc3QgPSBmcmllbmRzW2ldIGVuZA0KCQllbmQNCgkJDQoJCWlmIGNsb3Nlc3Qgfj0gbmlsIGFuZCBwbGF5ZXI6R2V0RGlzdGFuY2UoY2xvc2VzdCkgPD0gY29uZmlnLmZvbGxvd0NoYW1wLmZvbGxvd0Rpc3QgdGhlbiByZXR1cm4gdHJ1ZQ0KCQllbHNlIHJldHVybiBmYWxzZQ0KCQllbmQNCgllbmQNCgkNCglhY3Rpb25zWyJpblR1cnJldCJdID0gZnVuY3Rpb24oKQ0KCQlsb2NhbCBteVR1cnJldCA9IEdldENsb3NlVG93ZXIocGxheWVyLCBwbGF5ZXIudGVhbSkNCgkJaWYgcGxheWVyOkdldERpc3RhbmNlKG15VHVycmV0KSA8PSBjb25maWcuZm9sbG93Q2hhbXAuZm9sbG93RGlzdCBhbmQgcGxheWVyOkdldERpc3RhbmNlKGFsbHlTcGF3bikgPCBHZXREaXN0YW5jZShhbGx5U3Bhd24sIG15VHVycmV0KSB0aGVuIHJldHVybiB0cnVlDQoJCWVsc2UgcmV0dXJuIGZhbHNlDQoJCWVuZA0KCWVuZA0KCQ0KCWFjdGlvbnNbIm1hdGNoUGFydG5lciJdID0gZnVuY3Rpb24oKQ0KCQlpZiBwYXJ0bmVyID09IG5pbCB0aGVuDQoJCQlsb2NhbCBteUNhcnJ5ID0gR2V0UGxheWVycyhwbGF5ZXIudGVhbSwgZmFsc2UsIGZhbHNlKQ0KCQkJbG9jYWwgc2NvcmUgPSB7fQ0KCQkJbG9jYWwgbWF4U2NvcmUgPSAtMQ0KCQkJcGFydG5lciA9IG5pbA0KCQkNCgkJCWZvciBpID0gMSwgI215Q2FycnksIDEgZG8NCgkJCQlzY29yZVtpXSA9IDANCgkJCQlmb3IgaiA9IDEsICNteUNhcnJ5LCAxIGRvDQoJCQkJCWlmIEdldERpc3RhbmNlKG15Q2FycnlbaV0sIGJvdHRvbVBvaW50KSA8IEdldERpc3RhbmNlKG15Q2Fycnlbal0sIGJvdHRvbVBvaW50KSB0aGVuIHNjb3JlW2ldID0gc2NvcmVbaV0gKyAxIGVuZA0KCQkJCWVuZA0KCQkJCWlmIEdldERpc3RhbmNlKGJvdHRvbVBvaW50LCBteUNhcnJ5W2ldKSA8IDYwMDAgdGhlbiBzY29yZVtpXSA9IHNjb3JlW2ldICsgNSBlbmQNCgkJCQlpZiBHZXREaXN0YW5jZShhbGx5U3Bhd24sIG15Q2FycnlbaV0pIDwgNTAwMCB0aGVuIHNjb3JlW2ldID0gc2NvcmVbaV0gLSAxMDAwMCBlbmQNCgkJCWVuZA0KCQkJDQoJCQlmb3IgayA9IDEsICNteUNhcnJ5LCAxIGRvDQoJCQkJaWYgc2NvcmVba10gPiBtYXhTY29yZSBhbmQgc2NvcmVba10gPiAwIHRoZW4NCgkJCQkJbWF4U2NvcmUgPSBzY29yZVtrXQ0KCQkJCQlwYXJ0bmVyID0gbXlDYXJyeVtrXQ0KCQkJCWVuZA0KCQkJZW5kDQoJCQkNCgkJCWlmIHBhcnRuZXIgfj0gbmlsIHRoZW4NCgkJCQlQcmludENoYXQoIm15UGFydG5lcjogIi4ucGFydG5lci5uYW1lKQ0KCQkJCXBBZmsgPSBmYWxzZQ0KCQkJCWxhc3RQYXJ0bmVyTW92ZSA9IG9zLmNsb2NrKCkNCgkJCQlyZXR1cm4gdHJ1ZQ0KCQkJZWxzZQ0KCQkJCXJldHVybiBmYWxzZQ0KCQkJZW5kDQoJCWVsc2UNCgkJCXJldHVybiBmYWxzZQ0KCQllbmQNCgllbmQNCgkNCglhY3Rpb25zWyJwYXJ0bmVyUmVjYWxsaW5nIl0gPSBmdW5jdGlvbigpDQoJCXJldHVybiBwUmVjYWxsaW5nDQoJZW5kDQoJDQoJYWN0aW9uc1siaXNSZWNhbGxpbmciXSA9IGZ1bmN0aW9uKCkNCgkJZm9yIGk9MSwgb2JqTWFuYWdlci5tYXhPYmplY3RzLCAxIGRvDQoJCQlsb2NhbCBvYmogPSBvYmpNYW5hZ2VyOmdldE9iamVjdChpKQ0KCQkJaWYgb2JqIH49IG5pbCBhbmQgb2JqLnZhbGlkIGFuZCBvYmoubmFtZTpmaW5kKCJUZWxlcG9ydEhvbWUiKSB+PSBuaWwgYW5kIHBsYXllcjpHZXREaXN0YW5jZShvYmopIDwgNzAgdGhlbg0KCQkJCXJldHVybiB0cnVlDQoJCQllbmQNCgkJZW5kDQoJCXJldHVybiBmYWxzZQ0KCWVuZA0KCQ0KCWFjdGlvbnNbImZvbGxvd1BhcnRuZXIiXSA9IGZ1bmN0aW9uKCkNCgkJZm9sbG93WCA9ICgoYWxseVNwYXduLnggLSBwYXJ0bmVyLngpLyhwYXJ0bmVyOkdldERpc3RhbmNlKGFsbHlTcGF3bikpICogKChjb25maWcuZm9sbG93Q2hhbXAuZm9sbG93RGlzdCAtIDMwMCkgLyAyICsgMzAwKSArIHBhcnRuZXIueCArIG1hdGgucmFuZG9tKC0oKGNvbmZpZy5mb2xsb3dDaGFtcC5mb2xsb3dEaXN0LTMwMCkvMyksKChjb25maWcuZm9sbG93Q2hhbXAuZm9sbG93RGlzdC0zMDApLzMpKSkNCgkJZm9sbG93WiA9ICgoYWxseVNwYXduLnogLSBwYXJ0bmVyLnopLyhwYXJ0bmVyOkdldERpc3RhbmNlKGFsbHlTcGF3bikpICogKChjb25maWcuZm9sbG93Q2hhbXAuZm9sbG93RGlzdCAtIDMwMCkgLyAyICsgMzAwKSArIHBhcnRuZXIueiArIG1hdGgucmFuZG9tKC0oKGNvbmZpZy5mb2xsb3dDaGFtcC5mb2xsb3dEaXN0LTMwMCkvMyksKChjb25maWcuZm9sbG93Q2hhbXAuZm9sbG93RGlzdC0zMDApLzMpKSkNCgkJCQ0KCQlwbGF5ZXI6TW92ZVRvKGZvbGxvd1gsIGZvbGxvd1opDQoJCQ0KCQlyZXR1cm4gdHJ1ZQ0KCWVuZA0KCQ0KCWFjdGlvbnNbImdvVHVycmV0Il0gPSBmdW5jdGlvbigpDQoJCWxvY2FsIG15VHVycmV0ID0gR2V0Q2xvc2VUb3dlcihwbGF5ZXIsIHBsYXllci50ZWFtKQ0KCQlmb2xsb3dYID0gKGFsbHlTcGF3bi54IC0gbXlUdXJyZXQueCkvKG15VHVycmV0OkdldERpc3RhbmNlKGFsbHlTcGF3bikpICogKChjb25maWcuZm9sbG93Q2hhbXAuZm9sbG93RGlzdCAtIDMwMCkgLyAyICsgMzAwKSArIG15VHVycmV0LngNCgkJZm9sbG93WiA9IChhbGx5U3Bhd24ueiAtIG15VHVycmV0LnopLyhteVR1cnJldDpHZXREaXN0YW5jZShhbGx5U3Bhd24pKSAqICgoY29uZmlnLmZvbGxvd0NoYW1wLmZvbGxvd0Rpc3QgLSAzMDApIC8gMiArIDMwMCkgKyBteVR1cnJldC56DQoJCXBsYXllcjpNb3ZlVG8obWF0aC5mbG9vcihmb2xsb3dYKSwgbWF0aC5mbG9vcihmb2xsb3daKSkNCgkJCQ0KCQlyZXR1cm4gdHJ1ZQ0KCWVuZA0KCQ0KCWFjdGlvbnNbInRvd2VyRm9jdXNQbGF5ZXIiXSA9IGZ1bmN0aW9uKCkNCgkJcmV0dXJuIEZvY3VzT2ZUb3dlcg0KCWVuZA0KCQ0KCWFjdGlvbnNbInJ1bkZyb21Ub3dlciJdID0gZnVuY3Rpb24oKQ0KCQlsb2NhbCBmb2xsb3dYID0gKDIgKiBteUhlcm8ueCkgLSB5aWtlc1R1cnJldC54DQoJCWxvY2FsIGZvbGxvd1ogPSAoMiAqIG15SGVyby56KSAtIHlpa2VzVHVycmV0LnoNCgkJcGxheWVyOk1vdmVUbyhmb2xsb3dYLCBmb2xsb3daKQ0KCQkNCgkJcmV0dXJuIHRydWUNCgllbmQNCgkNCglhY3Rpb25zWyJyZWNhbGwiXSA9IGZ1bmN0aW9uKCkNCgkJLS1QcmludENoYXQoIlJlY2FsbGluZyIpDQoJCWlmIG5vdCBJbkZvdW50YWluKCkgdGhlbiBDYXN0U3BlbGwoUkVDQUxMKSBlbmQNCgkJcmV0dXJuIHRydWUNCgllbmQNCgkNCglsb2NhbCByZXN1bHQgPSBhY3Rpb25zW3NlbGYuYWN0aW9uXSgpDQoJLS1pZiByZXN1bHQgdGhlbiBQcmludENoYXQoInRydWUiKSBlbHNlIFByaW50Q2hhdCgiZmFsc2UiKSBlbmQNCglyZXR1cm4gcmVzdWx0DQplbmQNCg0KLS1bW0VuZCBvZiBDbGFzc2VzIGFyZWFdXS0tDQoNCg0KLS1bW1V0aWwgU2VjdGlvbl1dLS0NCg0KZnVuY3Rpb24gZGV0ZWN0U3Bhd25Qb2ludHMoKQ0KCWZvciBpPTEsIG9iak1hbmFnZXIubWF4T2JqZWN0cywgMSBkbw0KCQlsb2NhbCBjYW5kaWRhdGUgPSBvYmpNYW5hZ2VyOmdldE9iamVjdChpKQ0KCQlpZiBjYW5kaWRhdGUgfj0gbmlsIGFuZCBjYW5kaWRhdGUudmFsaWQgYW5kIGNhbmRpZGF0ZS50eXBlID09ICJvYmpfU3Bhd25Qb2ludCIgdGhlbiANCgkJCWlmIGNhbmRpZGF0ZS54IDwgMzAwMCB0aGVuIA0KCQkJCWlmIHBsYXllci50ZWFtID09IFRFQU1fQkxVRSB0aGVuIGFsbHlTcGF3biA9IGNhbmRpZGF0ZSBlbHNlIGVuZW15U3Bhd24gPSBjYW5kaWRhdGUgZW5kDQoJCQllbHNlIA0KCQkJCWlmIHBsYXllci50ZWFtID09IFRFQU1fQkxVRSB0aGVuIGVuZW15U3Bhd24gPSBjYW5kaWRhdGUgZWxzZSBhbGx5U3Bhd24gPSBjYW5kaWRhdGUgZW5kDQoJCQllbmQNCgkJZW5kDQoJZW5kDQplbmQNCg0KDQotLVtbcmV0dXJuIHRvd2VycyB0YWJsZV1dLS0NCg0KZnVuY3Rpb24gR2V0VG93ZXJzKHRlYW0pDQoJbG9jYWwgdG93ZXJzID0ge30NCglmb3IgaT0xLCBvYmpNYW5hZ2VyLm1heE9iamVjdHMsIDEgZG8NCgkJbG9jYWwgdG93ZXIgPSBvYmpNYW5hZ2VyOmdldE9iamVjdChpKQ0KCQlpZiB0b3dlciB+PSBuaWwgYW5kIHRvd2VyLnZhbGlkIGFuZCB0b3dlci50eXBlID09ICJvYmpfQUlfVHVycmV0IiBhbmQgdG93ZXIudmlzaWJsZSBhbmQgdG93ZXIudGVhbSA9PSB0ZWFtIHRoZW4NCgkJCXRhYmxlLmluc2VydCh0b3dlcnMsdG93ZXIpDQoJCWVuZA0KCWVuZA0KCWlmICN0b3dlcnMgPiAwIHRoZW4NCgkJcmV0dXJuIHRvd2Vycw0KCWVsc2UNCgkJcmV0dXJuIGZhbHNlDQoJZW5kDQplbmQNCg0KDQpmdW5jdGlvbiBHZXRDbG9zZVRvd2VyKGhlcm8sIHRlYW0pDQoJbG9jYWwgdG93ZXJzID0gR2V0VG93ZXJzKHRlYW0pDQoJaWYgI3Rvd2VycyA+IDAgdGhlbg0KCQlsb2NhbCBjYW5kaWRhdGUgPSB0b3dlcnNbMV0NCgkJZm9yIGk9MiwgI3Rvd2VycywgMSBkbw0KCQkJaWYgKHRvd2Vyc1tpXS5oZWFsdGgvdG93ZXJzW2ldLm1heEhlYWx0aCA+IDAuMSkgYW5kICBoZXJvOkdldERpc3RhbmNlKGNhbmRpZGF0ZSkgPiBoZXJvOkdldERpc3RhbmNlKHRvd2Vyc1tpXSkgdGhlbiBjYW5kaWRhdGUgPSB0b3dlcnNbaV0gZW5kDQoJCWVuZA0KCQlyZXR1cm4gY2FuZGlkYXRlDQoJZWxzZQ0KCQlyZXR1cm4gZmFsc2UNCgllbmQNCmVuZA0KDQoNCmZ1bmN0aW9uIEdldFBsYXllcnModGVhbSwgaW5jbHVkZURlYWQsIGluY2x1ZGVTZWxmKQ0KCWxvY2FsIHBsYXllcnMgPSB7fQ0KCWxvY2FsIHJlc3VsdCA9IHt9DQoJDQoJaWYgdGVhbSA9PSBwbGF5ZXIudGVhbSB0aGVuDQoJCXBsYXllcnMgPSBHZXRBbGx5SGVyb2VzKCkNCgllbHNlDQoJCXBsYXllcnMgPSBHZXRFbmVteUhlcm9lcygpDQoJZW5kDQoJDQoJZm9yIGk9MSwgI3BsYXllcnMsIDEgZG8NCgkJaWYgcGxheWVyc1tpXS52aXNpYmxlIGFuZCAobm90IHBsYXllcnNbaV0uZGVhZCBvciBwbGF5ZXJzW2ldLmRlYWQgPT0gaW5jbHVkZURlYWQpIHRoZW4NCgkJCXRhYmxlLmluc2VydChyZXN1bHQsIHBsYXllcnNbaV0pDQoJCWVuZA0KCWVuZA0KCQ0KCWlmIA0KCQlpbmNsdWRlU2VsZiB0aGVuIHRhYmxlLmluc2VydChyZXN1bHQsIHBsYXllcikNCgllbHNlIA0KCQlmb3IgaT0xLCAjcmVzdWx0LCAxIGRvDQoJCQlpZiByZXN1bHRbaV0gPT0gcGxheWVyIHRoZW4NCgkJCQl0YWJsZS5yZW1vdmUocmVzdWx0LCBpKQ0KCQkJCWJyZWFrDQoJCQllbmQNCgkJZW5kDQoJZW5kDQoJDQoJcmV0dXJuIHJlc3VsdA0KZW5kDQoNCg0KZnVuY3Rpb24gY2hlY2tBZmsoKQ0KCWlmIHBhcnRuZXIgfj0gbmlsIGFuZCBHZXREaXN0YW5jZShwYXJ0bmVyLCBhbGx5U3Bhd24pIDwgMzAwMCB0aGVuDQoJCWlmIG9zLmNsb2NrKCkgPj0gbGFzdFBhcnRuZXJNb3ZlICsgQUZLX01BWFRJTUUgdGhlbg0KCQkJcEFmayA9IHRydWUNCgkJZW5kDQoJZWxzZWlmIHBhcnRuZXIgfj0gbmlsIHRoZW4NCgkJbGFzdFBhcnRuZXJNb3ZlID0gb3MuY2xvY2soKQ0KCQlwQWZrID0gZmFsc2UNCgllbmQNCmVuZA0KDQotLVtbRW5kIFV0aWwgU2VjdGlvbl1dLS0NCg0KZnVuY3Rpb24gbW91bnRCZWhhdmlvclRyZWUoKQ0KCS0tMXN0IGxldmVsDQoJcm9vdCA9IFNlcXVlbmNlOm5ldygpDQoJc2VxdWVuY2UxID0gU2VxdWVuY2U6bmV3KCkNCglzZXF1ZW5jZTIgPSBTZXF1ZW5jZTpuZXcoKQ0KCXNlcXVlbmNlMyA9IFNlcXVlbmNlOm5ldygpDQoJc2VxdWVuY2U0ID0gU2VxdWVuY2U6bmV3KCkNCglzZXF1ZW5jZTUgPSBTZXF1ZW5jZTpuZXcoKQ0KCXNlcXVlbmNlNiA9IFNlcXVlbmNlOm5ldygpDQoJc2VxdWVuY2U3ID0gU2VxdWVuY2U6bmV3KCkgLS0gQXR0YWNrZWQgYnkgdG93ZXINCglzZXF1ZW5jZTggPSBTZXF1ZW5jZTpuZXcoKSAtLSBTYWZlIGluIHR1cnJldA0KCQ0KCXNlbGVjdG9yMSA9IFNlbGVjdG9yOm5ldygpDQoJc2VsZWN0b3IyID0gU2VsZWN0b3I6bmV3KCkNCglzZWxlY3RvcjMgPSBTZWxlY3RvcjpuZXcoKQ0KCXNlbGVjdG9yNCA9IFNlbGVjdG9yOm5ldygpDQoJc2VsZWN0b3I1ID0gU2VsZWN0b3I6bmV3KCkgLS0gcGFydG5lciBhZmsNCgkNCglzdGFydFRpbWUgCQk9IEFjdGlvbjpuZXd7YWN0aW9uID0gInN0YXJ0VGltZSJ9DQoJbm9QYXJ0bmVyIAkJPSBBY3Rpb246bmV3e2FjdGlvbiA9ICJub1BhcnRuZXIifQ0KCXBhcnRuZXJBZmsgCQk9IEFjdGlvbjpuZXd7YWN0aW9uID0gInBhcnRuZXJBZmsifQ0KCW1hdGNoUGFydG5lciAJPSBBY3Rpb246bmV3e2FjdGlvbiA9ICJtYXRjaFBhcnRuZXIifQ0KCXBhcnRuZXJBbGl2ZSAJPSBBY3Rpb246bmV3e2FjdGlvbiA9ICJwYXJ0bmVyQWxpdmUifQ0KCXBhcnRuZXJEZWFkIAk9IEFjdGlvbjpuZXd7YWN0aW9uID0gInBhcnRuZXJEZWFkIn0NCglpblR1cnJldCAJCT0gQWN0aW9uOm5ld3thY3Rpb24gPSAiaW5UdXJyZXQifQ0KCXJlY2FsbCAJCQk9IEFjdGlvbjpuZXd7YWN0aW9uID0gInJlY2FsbCJ9DQoJcGFydG5lckNsb3NlIAk9IEFjdGlvbjpuZXd7YWN0aW9uID0gInBhcnRuZXJDbG9zZSJ9DQoJZm9sbG93UGFydG5lciAJPSBBY3Rpb246bmV3e2FjdGlvbiA9ICJmb2xsb3dQYXJ0bmVyIn0NCglnb1R1cnJldCAJCT0gQWN0aW9uOm5ld3thY3Rpb24gPSAiZ29UdXJyZXQifQ0KCXBhcnRuZXJSZWNhbGxpbmc9IEFjdGlvbjpuZXd7YWN0aW9uID0gInBhcnRuZXJSZWNhbGxpbmcifQ0KCWZyaWVuZENsb3NlCQk9IEFjdGlvbjpuZXd7YWN0aW9uID0gImZyaWVuZENsb3NlIn0NCglmb2xsb3dGcmllbmQgCT0gQWN0aW9uOm5ld3thY3Rpb24gPSAiZm9sbG93RnJpZW5kIn0NCgl0b3dlckZvY3VzUGxheWVyPSBBY3Rpb246bmV3e2FjdGlvbiA9ICJ0b3dlckZvY3VzUGxheWVyIn0NCglydW5Gcm9tVG93ZXIJPSBBY3Rpb246bmV3e2FjdGlvbiA9ICJydW5Gcm9tVG93ZXIifQ0KCQ0KCS0tbHZsIDENCglyb290OmFkZENoaWxkKHN0YXJ0VGltZSkNCglyb290OmFkZENoaWxkKHNlbGVjdG9yMSkNCgkNCgktLWx2bDINCglzZWxlY3RvcjE6YWRkQ2hpbGQoc2VxdWVuY2UxKQ0KCXNlbGVjdG9yMTphZGRDaGlsZChzZXF1ZW5jZTcpIC0tIGZsZWUgZnJvbSB0b3dlcg0KCXNlbGVjdG9yMTphZGRDaGlsZChzZXF1ZW5jZTIpDQoJc2VsZWN0b3IxOmFkZENoaWxkKHNlcXVlbmNlMykNCglzZWxlY3RvcjE6YWRkQ2hpbGQoc2VxdWVuY2U0KQ0KCQ0KCS0tbHZsMw0KCXNlcXVlbmNlMTphZGRDaGlsZChzZWxlY3RvcjUpDQoJc2VxdWVuY2UxOmFkZENoaWxkKG1hdGNoUGFydG5lcikNCgkNCglzZXF1ZW5jZTc6YWRkQ2hpbGQodG93ZXJGb2N1c1BsYXllcikNCglzZXF1ZW5jZTc6YWRkQ2hpbGQocnVuRnJvbVRvd2VyKQ0KCQ0KCXNlcXVlbmNlMjphZGRDaGlsZChwYXJ0bmVyQWxpdmUpDQoJc2VxdWVuY2UyOmFkZENoaWxkKHNlbGVjdG9yMikNCgkNCglzZXF1ZW5jZTM6YWRkQ2hpbGQocGFydG5lckRlYWQpDQoJc2VxdWVuY2UzOmFkZENoaWxkKHNlbGVjdG9yMykNCgkNCglzZXF1ZW5jZTQ6YWRkQ2hpbGQoaW5UdXJyZXQpDQoJc2VxdWVuY2U0OmFkZENoaWxkKHJlY2FsbCkNCgkNCgktLWx2bCA0DQoJc2VsZWN0b3I1OmFkZENoaWxkKHBhcnRuZXJBZmspDQoJc2VsZWN0b3I1OmFkZENoaWxkKG5vUGFydG5lcikNCgkNCglzZWxlY3RvcjI6YWRkQ2hpbGQoc2VxdWVuY2U1KQ0KCXNlbGVjdG9yMjphZGRDaGlsZChwYXJ0bmVyQ2xvc2UpDQoJc2VsZWN0b3IyOmFkZENoaWxkKGZvbGxvd1BhcnRuZXIpDQoJDQoJLS1zZWxlY3RvcjM6YWRkQ2hpbGQoc2VxdWVuY2U2KQ0KCXNlbGVjdG9yMzphZGRDaGlsZChzZWxlY3RvcjQpDQoJDQoJLS1sdmwgNQ0KCXNlcXVlbmNlNTphZGRDaGlsZChwYXJ0bmVyUmVjYWxsaW5nKQ0KCS0tc2VxdWVuY2U1OmFkZENoaWxkKHBhcnRuZXJDbG9zZSkNCglzZXF1ZW5jZTU6YWRkQ2hpbGQocmVjYWxsKQ0KCQ0KCS0tc2VxdWVuY2U2OmFkZENoaWxkKGZyaWVuZENsb3NlKQ0KCS0tc2VxdWVuY2U2OmFkZENoaWxkKGZvbGxvd0ZyaWVuZCkNCgkNCglzZWxlY3RvcjQ6YWRkQ2hpbGQoc2VxdWVuY2U4KQ0KCXNlbGVjdG9yNDphZGRDaGlsZChnb1R1cnJldCkNCgkNCgktLWx2bCA2DQoJc2VxdWVuY2U4OmFkZENoaWxkKGluVHVycmV0KQ0KCXNlcXVlbmNlODphZGRDaGlsZChyZWNhbGwpDQplbmQNCg0KDQpmdW5jdGlvbiBPblJlY2FsbChoZXJvLCBjaGFubmVsVGltZUluTXMpDQogICAgaWYgaGVyby5pc01lIHRoZW4NCiAgICAgICAgbWVSZWNhbGxpbmcgPSB0cnVlDQoJZWxzZWlmIGhlcm8ubmFtZSA9PSBwYXJ0bmVyLm5hbWUgdGhlbg0KCQlwUmVjYWxsaW5nID0gdHJ1ZQ0KICAgIGVuZA0KZW5kDQoNCg0KZnVuY3Rpb24gT25BYm9ydFJlY2FsbChoZXJvKQ0KICAgIGlmIGhlcm8uaXNNZSB0aGVuDQogICAgICAgIG1lUmVjYWxsaW5nID0gZmFsc2UNCgllbHNlaWYgaGVyby5uYW1lID09IHBhcnRuZXIubmFtZSB0aGVuDQoJCXBSZWNhbGxpbmcgPSBmYWxzZQ0KICAgIGVuZCAgICAgICAgDQplbmQNCg0KDQpmdW5jdGlvbiBPbkZpbmlzaFJlY2FsbChoZXJvKQ0KICAgIGlmIGhlcm8uaXNNZSB0aGVuDQogICAgICAgIG1lUmVjYWxsaW5nID0gZmFsc2UNCgllbHNlaWYgaGVyby5uYW1lID09IHBhcnRuZXIubmFtZSB0aGVuDQoJCXBSZWNhbGxpbmcgPSBmYWxzZQ0KICAgIGVuZA0KZW5kDQoNCg0KZnVuY3Rpb24gT25EZWxldGVPYmoob2JqZWN0KQ0KCWlmIG9iamVjdC5uYW1lOmZpbmQoInlpa2VzIikgdGhlbg0KCQlGb2N1c09mVG93ZXIgPSBmYWxzZQ0KCQl5aWtlc1R1cnJldCA9IG5pbA0KCWVsc2VpZiBvYmplY3QubmFtZTpmaW5kKCJUZWxlcG9ydEhvbWUiKSBhbmQgR2V0RGlzdGFuY2UocGFydG5lciwgb2JqZWN0KSA8IDcwIHRoZW4NCgkJRGVsYXlBY3Rpb24oZnVuY3Rpb24oKSANCgkJcFJlY2FsbGluZyA9IGZhbHNlIA0KCQllbmQsIDAuNSwgezB9KQ0KCWVuZA0KZW5kDQoNCg0KZnVuY3Rpb24gT25DcmVhdGVPYmoob2JqZWN0KQ0KCWlmIG9iamVjdC5uYW1lOmZpbmQoInlpa2VzIikgdGhlbg0KCQlGb2N1c09mVG93ZXIgPSB0cnVlDQoJCXlpa2VzVHVycmV0ID0gR2V0Q2xvc2VUb3dlcihwbGF5ZXIsIFRFQU1fRU5FTVkpDQoJZWxzZWlmIG9iamVjdC5uYW1lOmZpbmQoIlRlbGVwb3J0SG9tZSIpIGFuZCBHZXREaXN0YW5jZShwYXJ0bmVyLCBvYmplY3QpIDwgNzAgdGhlbg0KCQlwUmVjYWxsaW5nID0gdHJ1ZQ0KCWVuZA0KZW5kDQoNCg0KZnVuY3Rpb24gZHJhd0ZvbGxvd01lbnUoKQ0KCWxvY2FsIHRlbXBTZXR1cERyYXdZID0gU2V0dXBEcmF3WQ0KCXRlbXBTZXR1cERyYXdZID0gdGVtcFNldHVwRHJhd1kgKyAwLjAzDQoJDQoJZm9yIGk9MSwgI2FsbGllcywgMSBkbw0KCQlEcmF3VGV4dCgiUHJlc3MgIi4uRm9sbG93S2V5c1RleHRbaV0uLiIgdG8gZm9sbG93IHBsYXllcjogIi4uYWxsaWVzW2ldLm5hbWUuLiIgKCIuLmFsbGllc1tpXS5jaGFyTmFtZS4uIikiLCBNZW51VGV4dFNpemUgLCAoV0lORE9XX1cgLSBXSU5ET1dfWCkgKiBTZXR1cERyYXdYLCAoV0lORE9XX0ggLSBXSU5ET1dfWSkgKiB0ZW1wU2V0dXBEcmF3WSAsIDB4ZmZmZmZmMDApIA0KCQl0ZW1wU2V0dXBEcmF3WSA9IHRlbXBTZXR1cERyYXdZICsgMC4wMw0KCWVuZA0KZW5kDQoNCg0KZnVuY3Rpb24gT25EcmF3KCkNCglpZiBwYXJ0bmVyIH49IG5pbCB0aGVuIERyYXdDaXJjbGUocGFydG5lci54LCBwYXJ0bmVyLnksIHBhcnRuZXIueiwgNzAsIEFSR0IoMjAwLDI1NSwyNTUsMCkpIGVuZA0KCWlmIGNvbmZpZy5mb2xsb3dDaGFtcC5kcmF3Rm9sbG93RGlzdCB0aGVuIERyYXdDaXJjbGUobXlIZXJvLngsIG15SGVyby55LCBteUhlcm8ueiwgY29uZmlnLmZvbGxvd0NoYW1wLmZvbGxvd0Rpc3QsIEFSR0IoMjAwLDEsMzMsMCkpIGVuZA0KCWRyYXdGb2xsb3dNZW51KCkNCmVuZA0KDQoNCmZ1bmN0aW9uIE9uVGljaygpDQoNCmlmIGZpcnN0Qm91Z2h0ID09IGZhbHNlIGFuZCBHZXRUaWNrQ291bnQoKSAtIHN0YXJ0aW5nVGltZSA+IDIwMDAgdGhlbg0KCQkJQnV5SXRlbSgyMDQ0KQ0KCQkJQnV5SXRlbSgzMzAxKSAtLSBBbmNpZW50IENvaW4NCgkJCUJ1eUl0ZW0oMzM0MCkgLS0gd2FyZGluZyB0b3RlbSAodHJpbmtldCkNCgkJCWZpcnN0Qm91Z2h0ID0gdHJ1ZQ0KCQllbmQNCglpZiBHZXRHYW1lKCkuaXNPdmVyIHRoZW4NCgkJVXBkYXRlV2ViKGZhbHNlLCBTY3JpcHROYW1lLCBpZCwgSFdJRCkNCgkJc3RhcnRVcCA9IGZhbHNlOw0KCWVuZA0KDQoJaWYoY29uZmlnLmVuYWJsZVNjcmlwdCl0aGVuDQoJCXJvb3Q6cnVuKCkNCgllbmQNCgkNCglsb2NhbCBtYW5hUGVyY2VudCA9IHBsYXllci5tYW5hL3BsYXllci5tYXhNYW5hDQogICAgICAgIGxvY2FsIEl0ZW1TbG90ID0ge0lURU1fMSxJVEVNXzIsSVRFTV8zLElURU1fNCxJVEVNXzUsSVRFTV82LH0NCiAgICAgICAgICAgIGZvciBpPTEsIDYsIDEgZG8NCiAgICAgICAgICAgICAgICBpZiBwbGF5ZXI6Z2V0SW52ZW50b3J5U2xvdChJdGVtU2xvdFtpXSkgPT0gMjAwNCBhbmQgbWFuYUxpbWl0ID49IG1hbmFQZXJjZW50IGFuZCBNUG90VXNlZCA9PSBmYWxzZSB0aGVuDQogICAgICAgICAgICAgICAgIEZpbmFsSXRlbXNsb3RNID0gSXRlbVNsb3RbaV0NCiAgICAgICAgICAgICAgICAgQ2FzdFNwZWxsKEZpbmFsSXRlbXNsb3RNKQ0KICAgICAgICAgICAgICAgICBNUG90VXNlZCA9IHRydWUNCiAgICAgICAgICAgICAgICAgbGFzdFRpbWVNUG90ID0gR2V0VGlja0NvdW50KCkNCiAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgaWYgR2V0VGlja0NvdW50KCkgLSBsYXN0VGltZU1Qb3QgPiAxNTAwMCB0aGVuDQogICAgICAgICAgICAgTVBvdFVzZWQgPSBmYWxzZQ0KICAgICAgICAgICAgZW5kDQogICAgICANCiAgICAgICAgbG9jYWwgaHBQZXJjZW50ID0gcGxheWVyLmhlYWx0aC9wbGF5ZXIubWF4SGVhbHRoDQogICAgICAgICAgICBmb3IgaT0xLCA2LCAxIGRvDQogICAgICAgICAgICAgICAgaWYgKHBsYXllcjpnZXRJbnZlbnRvcnlTbG90KEl0ZW1TbG90W2ldKSA9PSAyMDAzIG9yIHBsYXllcjpnZXRJbnZlbnRvcnlTbG90KEl0ZW1TbG90W2ldKSA9PSAyMDEwKSBhbmQgaHBMaW1pdCA+PSBocFBlcmNlbnQgYW5kIEhQb3RVc2VkID09IGZhbHNlIHRoZW4NCiAgICAgICAgICAgICAgICAgRmluYWxJdGVtc2xvdEggPSBJdGVtU2xvdFtpXQ0KICAgICAgICAgICAgICAgICBDYXN0U3BlbGwoRmluYWxJdGVtc2xvdEgpDQogICAgICAgICAgICAgICAgIEhQb3RVc2VkID0gdHJ1ZQ0KICAgICAgICAgICAgICAgICBsYXN0VGltZUhQb3QgPSBHZXRUaWNrQ291bnQoKQ0KICAgICAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgZW5kDQoNCiAgICAgICAgICAgIGlmIEdldFRpY2tDb3VudCgpIC0gbGFzdFRpbWVIUG90ID4gMTUwMDAgdGhlbg0KICAgICAgICAgICAgIEhQb3RVc2VkID0gZmFsc2UNCiAgICAgICAgICAgIGVuZA0KDQoJCS0tIFJ1biBidXkgY29kZSBvbmx5IGlmIGluIGZvdW50YWluDQoJCWlmIEluRm91bnRhaW4oKSB0aGVuDQoJCQktLSBDb250aW51b3VzIHdhcmQgcHVyY2hhc2VzDQoJCQlpZiBHZXRUaWNrQ291bnQoKSAtIHdhcmRCb3VnaHQgPiAzMDAwMCBhbmQgR2V0VGlja0NvdW50KCkgLSBzdGFydGluZ1RpbWUgPiA4MDAwIGFuZCBHZXRJbnZlbnRvcnlTbG90SXRlbSgyMDQ0KSA9PSBuaWwgdGhlbg0KCQkJCUJ1eUl0ZW0oMjA0NCkgLS0gc3RlYWx0aCB3YXJkIChncmVlbikNCgkJCQl3YXJkQm91Z2h0ID0gR2V0VGlja0NvdW50KCkNCgkJCWVuZA0KCQkJDQoJCQktLSBJdGVtIHB1cmNoYXNlcw0KCQkJaWYgR2V0VGlja0NvdW50KCkgLSBzdGFydGluZ1RpbWUgPiA1MDAwIHRoZW4JDQoJCQkJaWYgR2V0VGlja0NvdW50KCkgPiBsYXN0QnV5ICsgYnV5RGVsYXkgdGhlbg0KCQkJCQlpZiBHZXRJbnZlbnRvcnlTbG90SXRlbShzaG9wTGlzdFtuZXh0YnV5SW5kZXhdKSB+PSBuaWwgdGhlbg0KCQkJCQkJLS1MYXN0IEJ1eSBzdWNjZXNzZnVsDQoJCQkJCQluZXh0YnV5SW5kZXggPSBuZXh0YnV5SW5kZXggKyAxDQoJCQkJCWVsc2UNCgkJCQkJCS0tTGFzdCBCdXkgdW5zdWNjZXNzZnVsIChidXkgYWdhaW4pDQoJCQkJCQlCdXlJdGVtKHNob3BMaXN0W25leHRidXlJbmRleF0pDQoJCQkJCQlsYXN0QnV5ID0gR2V0VGlja0NvdW50KCkNCgkJCQkJZW5kDQoJCQkJZW5kDQoJCQllbmQNCgkJZW5kDQoJCQ0KCQlpZiBzY3JpcHRBY3RpdmUgdGhlbg0KDQppZiBHZXRUaWNrQ291bnQoKSAtIHdhcmRUaW1lciA+IDEwMDAwIHRoZW4NCndhcmRVcGRhdGUoKQ0KZW5kCQ0KDQppZiAobXlIZXJvOkNhblVzZVNwZWxsKElURU1fNykgPT0gUkVBRFkgYW5kIG15SGVybzpnZXRJdGVtKElURU1fNykuaWQgPT0gMzM0MCkgdGhlbg0Kd2FyZFNsb3QgPSBHZXRJbnZlbnRvcnlTbG90SXRlbSgzMzQwKQ0KZWxzZWlmIChteUhlcm86Q2FuVXNlU3BlbGwoSVRFTV83KSA9PSBSRUFEWSBhbmQgbXlIZXJvOmdldEl0ZW0oSVRFTV83KS5pZCA9PSAzMzUwKSB0aGVuDQp3YXJkU2xvdCA9IEdldEludmVudG9yeVNsb3RJdGVtKDMzNTApDQplbHNlaWYgR2V0SW52ZW50b3J5U2xvdEl0ZW0oMjA0NCkgfj0gbmlsIHRoZW4NCndhcmRTbG90ID0gR2V0SW52ZW50b3J5U2xvdEl0ZW0oMjA0NCkNCmVsc2VpZiBHZXRJbnZlbnRvcnlTbG90SXRlbSgyMDQzKSB+PSBuaWwgdGhlbg0Kd2FyZFNsb3QgPSBHZXRJbnZlbnRvcnlTbG90SXRlbSgyMDQzKQ0KZWxzZQ0Kd2FyZFNsb3QgPSBuaWwNCmVuZA0KDQpmb3IgaSA9IDEsIDEyIGRvDQppZiB3YXJkU2xvdCB+PSBuaWwgYW5kIEdldFRpY2tDb3VudCgpIC0gbGFzdFdhcmQgPiAyMDAwIHRoZW4NCmlmIG1hdGguc3FydCgod2FyZE1hdHJpeFsxXVtpXSAtIHBsYXllci54KSood2FyZE1hdHJpeFsxXVtpXSAtIHBsYXllci54KSArICh3YXJkTWF0cml4WzJdW2ldIC0gcGxheWVyLnopKih3YXJkTWF0cml4WzJdW2ldIC0gcGxheWVyLnopKSA8IDYwMCBhbmQgd2FyZE1hdHJpeFszXVtpXSA9PSBmYWxzZSB0aGVuDQpDYXN0U3BlbGwoIHdhcmRTbG90LCB3YXJkTWF0cml4WzFdW2ldLCB3YXJkTWF0cml4WzJdW2ldICkNCmxhc3RXYXJkID0gR2V0VGlja0NvdW50KCkNCndhcmRNYXRyaXhbM11baV0gPSB0cnVlDQpicmVhaw0KZW5kDQplbmQNCmVuZA0KZW5kCQ0KZW5kDQoNCmZ1bmN0aW9uIE9uV25kTXNnKG1zZywga2V5Y29kZSkNCmlmIGtleWNvZGUgPT0gSEsgdGhlbg0KICAgICAgICBpZiBtc2cgPT0gS0VZX0RPV04gdGhlbg0KICAgICAgICAgaWYgc2NyaXB0QWN0aXZlIHRoZW4NCiAgICAgICAgIHNjcmlwdEFjdGl2ZSA9IGZhbHNlDQogICAgICAgICBQcmludENoYXQoInNvcmFrYUJPVCAtIEF1dG8gV2FyZHMgZGlzYWJsZWQhIikNCiAgZWxzZQ0KICAgICBzY3JpcHRBY3RpdmUgPSB0cnVlDQogICAgIFByaW50Q2hhdCgic29yYWthQk9UIC0gQXV0byBXYXJkcyBlbmFibGVkISIpDQogICAgIGVuZA0KICAgICAgICBlbmQNCiAgICBlbmQNCglmb3IgaT0xLCAjYWxsaWVzLCAxIGRvIA0KCQlpZiBrZXljb2RlID09IEZvbGxvd0tleXNDb2Rlc1tpXSBhbmQgbXNnID09IEtFWV9ET1dOIHRoZW4NCgkJCXBhcnRuZXIgPSBhbGxpZXNbaV0NCgkJCVByaW50Q2hhdCgiUGFzc2l2ZSBGb2xsb3cgPj4gZm9sbG93aW5nIHN1bW1vbmVyOiAiLi5hbGxpZXNbaV0ubmFtZSkNCgkJZW5kDQoJZW5kDQplbmQNCg0KZnVuY3Rpb24gZHJhd01lbnUoKQ0KCWNvbmZpZyA9IHNjcmlwdENvbmZpZygic29yYWthQk9UIC0gUXVlZW4gT2YgVGhlIERhcmsiLCAiUGFzc2l2ZSBGb2xsb3ciKSANCg0KCWNvbmZpZzphZGRQYXJhbSgiZW5hYmxlU2NyaXB0IiwgIkF1dG8gRm9sbG93IiwgU0NSSVBUX1BBUkFNX09OS0VZVE9HR0xFLCB0cnVlLCAxMTUpDQoJICANCgljb25maWc6YWRkU3ViTWVudSgiRm9sbG93IFNldHRpbmdzIiwgImZvbGxvd0NoYW1wIikNCgljb25maWc6YWRkU3ViTWVudSgiUmVnZW4gYXQgRm91bnRhaW4iLCAiZm9udFJlZ2VuIikNCgljb25maWc6YWRkU3ViTWVudSgiQXV0byB1c2UgU3VtbW9uZXIgU3BlbGxzIiwgImF1dG9TcGVsbHMiKQ0KCWNvbmZpZzphZGRTdWJNZW51KCJBdXRvIFdhcmRzIEYzIC0gT24vT2ZmIiwgImF1dG93YXJkcyIpDQoNCgkNCgljb25maWcuZm9udFJlZ2VuOmFkZFBhcmFtKCJocFJlZ2VuIiwgIk1pbiBIUCUgdG8gbGVhdmUiLCBTQ1JJUFRfUEFSQU1fU0xJQ0UsIERFRkFVTFRfSFBfUkVHRU4sIDAsIDEwMCwgMCkNCgljb25maWcuZm9udFJlZ2VuOmFkZFBhcmFtKCJtYW5hUmVnZW4iLCAiTWluIE1hbmElIHRvIGxlYXZlIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCBERUZBVUxUX01BTkFfUkVHRU4sIDAsIDEwMCwgMCkNCgkNCgljb25maWcuYXV0b1NwZWxsczphZGRQYXJhbSgidXNlSGVhbCIsICJBdXRvIFN1bW1vbmVyIEhlYWwiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIGZhbHNlKQ0KCWNvbmZpZy5hdXRvU3BlbGxzOmFkZFBhcmFtKCJ1c2VDbGFyaXR5IiwgIkF1dG8gU3VtbW9uZXIgQ2xhcml0eSIsIFNDUklQVF9QQVJBTV9PTk9GRiwgZmFsc2UpDQoJDQoJY29uZmlnLmF1dG9TcGVsbHM6YWRkUGFyYW0oIm1hbmFUaHJlc2hvbGQiLCAiTWFuYSUgZm9yIHVzZSBDbGFyaXR5IiwgU0NSSVBUX1BBUkFNX1NMSUNFLCBERUZBVUxUX01BTkFfVEhSRVNIT0xELCAwLCAxMDAsIDApDQoJY29uZmlnLmF1dG9TcGVsbHM6YWRkUGFyYW0oImhlYWx0aFRocmVzaG9sZCIsICJIUCUgZm9yIHVzZSBDdXJlIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCBERUZBVUxUX0hFQUxUSF9USFJFU0hPTEQsIDAsIDEwMCwgMCkNCgkNCgljb25maWcuZm9sbG93Q2hhbXA6YWRkUGFyYW0oImZvbGxvd0Rpc3QiLCAiRm9sbG93IERpc3RhbmNlIiwgU0NSSVBUX1BBUkFNX1NMSUNFLCBERUZBVUxUX0ZPTExPV19ESVNUQU5DRSwgNDAwLCAyMDAwLCAwKQ0KCWNvbmZpZy5mb2xsb3dDaGFtcDphZGRQYXJhbSgiZHJhd0ZvbGxvd0Rpc3QiLCAiRHJhdyBGb2xsb3cgRGlzdGFuY2UiLCBTQ1JJUFRfUEFSQU1fT05PRkYsIHRydWUpDQplbmQNCg0KZnVuY3Rpb24gaW5pdFZhcmlhYmxlcygpDQoJDQoJYm90dG9tUG9pbnQgPSBWZWN0b3IoMTIxMDAsIDIxMDApDQoNCgktLVtbc3VtbW9uZXJzXV0tLQ0KCURFRkFVTFRfRk9MTE9XX0RJU1RBTkNFID0gNDAwDQoJREVGQVVMVF9NQU5BX1JFR0VOID0gODANCglERUZBVUxUX0hQX1JFR0VOID0gODANCg0KCS0tW1tDT05TVEFOVFNdXS0tDQoJTUlOX0RJU1RBTkNFID0gMjc1DQoJSEVBTF9ESVNUQU5DRSA9IDcwMA0KCURFRkFVTFRfSEVBTFRIX1RIUkVTSE9MRCA9IDcwDQoJREVGQVVMVF9NQU5BX1RIUkVTSE9MRCA9IDY2DQoNCglBRktfTUFYVElNRSA9IDEyMA0KCVNDUklQVF9TVEFSVF9USU1FID0gb3MuY2xvY2soKSArIDYwIC0tIGNoYW5nZSB0aGUgYWRjIHNlbGVjdGluZyB0aW1lDQoJbGFzdFBhcnRuZXJNb3ZlID0gbmlsDQoJDQoJRm9jdXNPZlRvd2VyID0gZmFsc2UNCglwYXJ0bmVyID0gbmlsDQoJdGVtcF9wYXJ0bmVyID0gbmlsDQoJcEFmayA9IHRydWUNCglwUmVjYWxsaW5nID0gZmFsc2UgLS0gaXMgUGFydG5lciBSZWNhbGxpbmc/DQoJbWVSZWNhbGxpbmcgPSBmYWxzZQ0KCXlpa2VzVHVycmV0ID0gbmlsDQoJY29sbGVjdFRpbWVyID0gdHJ1ZQ0KDQoJLS0gc3Bhd24NCglhbGx5U3Bhd24gPSBuaWwNCgllbmVteVNwYXduID0gbmlsDQoNCglkZXRlY3RTcGF3blBvaW50cygpDQplbmQNCg0KDQpmdW5jdGlvbiBPbkxvYWQoKQ0KDQppZiBHZXRJbnZlbnRvcnlTbG90SXNFbXB0eShJVEVNXzEpID09IGZhbHNlIHRoZW4NCgkJCWZpcnN0Qm91Z2h0ID0gdHJ1ZQ0KCQllbmQNCglVcGRhdGVXZWIodHJ1ZSwgU2NyaXB0TmFtZSwgaWQsIEhXSUQpDQoJcGxheWVyID0gR2V0TXlIZXJvKCkNCglpbml0VmFyaWFibGVzKCkNCglkcmF3TWVudSgpDQoJbW91bnRCZWhhdmlvclRyZWUoKQ0KCWFsbGllcyA9IEdldFBsYXllcnMocGxheWVyLnRlYW0sIHRydWUsIGZhbHNlKQ0KCXN0YXJ0aW5nVGltZSA9IEdldFRpY2tDb3VudCgpDQoJCQ0KCQkNCiAgICAgICAgICAgIC0tc3BlbGwgZGlzcGF0Y2hlcg0KICAgICAgICAgICAgQUlUaW1lci5hZGQoMC4yNSxmdW5jdGlvbigpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1kb250IGRvIGFueSBhY3Rpb24gaWYgZGVhZCBvciByZWNhbGwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBteUhlcm8uZGVhZCA9PSB0cnVlIG9yIEFJQ29uZGl0aW9uLnJlY2FsbChteUhlcm8pID09IHRydWUgdGhlbiByZXR1cm4gZW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1jaGVjayBmb3IgaGVhbA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIENhblVzZVNwZWxsKF9XKSA9PSBSRUFEWSB0aGVuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCByZXN1bHQgPSBBSUZpbmQud2Vha0FsbHkobXlIZXJvLDU1MCxmYWxzZSx0cnVlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmVzdWx0IH49IG5pbCBhbmQgKHJlc3VsdC5oZWFsdGggKyBBSVN0YXQuaGVhbChyZXN1bHQsR2V0U3BlbGxEYXRhKF9XKS5sZXZlbCAqIDMwICsgbXlIZXJvLmFwICogMC42MCkpL3Jlc3VsdC5tYXhIZWFsdGggPD0gZGVzaXJlZEhlYWwgdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYXN0U3BlbGwoX1cscmVzdWx0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tY2hlY2sgZm9yIHVsdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIENhblVzZVNwZWxsKF9SKSA9PSBSRUFEWSB0aGVuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXNhdmUgdWx0IHBvd2VyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCB1bHRQb3dlciA9ICgxNTAgKyAoR2V0U3BlbGxEYXRhKF9SKS5sZXZlbCAtIDEpICogMTAwICsgbXlIZXJvLmFwICogMC41NSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tc2F2ZSByZXN1bHQgdmFyaWFibGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHJlc3VsdCA9IDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tZ2V0IGhlYWwgcmVzdWx0cyBvbiB0YXJnZXRzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSA9IDEsICNBSURhdGEuYWxsaWVzLCAxIGRvDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tZG9udCBjb3VudCBhZmsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgQUlTdGF0LmFmayhBSURhdGEuYWxsaWVzW2ldKSA+IDE4MCB0aGVuIHJlc3VsdCA9IHJlc3VsdCArIGRlc2lyZWRVbHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS11bHQgd2FzdGVkIGNhc2VzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VpZiBBSURhdGEuYWxsaWVzW2ldLmRlYWQgPT0gdHJ1ZSBvciBBSVJvdXRpbmUuZGlzdGFuY2UoQUlEYXRhLmFsbHlTcGF3bixBSURhdGEuYWxsaWVzW2ldKSA8IDE1MDAgb3IgQUlDb25kaXRpb24ucmVjYWxsKEFJRGF0YS5hbGxpZXNbaV0pID09IHRydWUgdGhlbiByZXN1bHQgPSByZXN1bHQgKyAxDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tY2FsY3VsYXRlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgcmVzdWx0ID0gcmVzdWx0ICsgKEFJRGF0YS5hbGxpZXNbaV0uaGVhbHRoICsgQUlTdGF0LmhlYWwoQUlEYXRhLmFsbGllc1tpXSx1bHRQb3dlcikpL0FJRGF0YS5hbGxpZXNbaV0ubWF4SGVhbHRoIGVuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLWNoZWNrIGFtb3VudA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmVzdWx0LyNBSURhdGEuYWxsaWVzIDw9IGRlc2lyZWRVbHQgdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYXN0U3BlbGwoX1IpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kDQotLWNoZWNrIGZvciBzdW1tb25lcnMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBzdW1tb25lciA9IEFJU3BlbGwuaGVhbCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1oZWFsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZGVzaXJlZFN1bW1vbmVycyA9PSB0cnVlIGFuZCBzdW1tb25lciB+PSBuaWwgYW5kIEFJUm91dGluZS5kaXN0YW5jZShteUhlcm8sQUlEYXRhLmFsbHlTcGF3bikgPiAxMDAwIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tc2F2ZSBIRUFMIHBvd2VyDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBoZWFsUG93ZXIgPSA3NSArIChteUhlcm8ubGV2ZWwgKiAxNSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tc2F2ZSByZXN1bHQgdmFyaWFibGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHJlc3VsdCA9IDANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tZ2V0IGFsbGllcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYWxsaWVzID0gQUlGaW5kLmFsbGllcyhteUhlcm8sNjAwLGZhbHNlLHRydWUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAjYWxsaWVzID4gMSB0aGVuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tZ2V0IGhlYWwgcmVzdWx0cyBvbiB0YXJnZXRzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpID0gMSwgI2FsbGllcywgMSBkbw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tY2FsY3VsYXRlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgYWxsaWVzW2ldLm1heEhlYWx0aCAtIGFsbGllc1tpXS5oZWFsdGggPiBoZWFsUG93ZXIgdGhlbiByZXN1bHQgPSByZXN1bHQgKyBtYXRoLm1heCgxLjUsLTEgKiBBSVN0YXQuaHBzKGFsbGllc1tpXSkgLyBoZWFsUG93ZXIpIGVuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1jaGVjayByZXN1bHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmVzdWx0LyNhbGxpZXMgPj0gZGVzaXJlZEhlYWwgdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhc3RTcGVsbChzdW1tb25lcikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tbWFuYQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1bW1vbmVyID0gQUlTcGVsbC5jbGFyaXR5KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkZXNpcmVkU3VtbW9uZXJzID09IHRydWUgYW5kIHN1bW1vbmVyIH49IG5pbCBhbmQgQUlSb3V0aW5lLmRpc3RhbmNlKG15SGVybyxBSURhdGEuYWxseVNwYXduKSA+IDEwMDAgdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1zYXZlIHJlc3VsdCB2YXJpYWJsZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgcmVzdWx0ID0gMA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1nZXQgYWxsaWVzDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBhbGxpZXMgPSBBSUZpbmQuYWxsaWVzKG15SGVybyw2MDAsZmFsc2UsdHJ1ZSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICNhbGxpZXMgPiAxIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1nZXQgY2xhcml0eSByZXN1bHRzIG9uIHRhcmdldHMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgPSAxLCAjYWxsaWVzLCAxIGRvDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1jYWxjdWxhdGUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBhbGxpZXNbaV0ubWFuYS9hbGxpZXNbaV0ubWF4TWFuYSArIDAuNCA8IGRlc2lyZWRIZWFsIHRoZW4gcmVzdWx0ID0gcmVzdWx0ICsgMSBlbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tY2hlY2sgcmVzdWx0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlc3VsdC8jYWxsaWVzID49IGRlc2lyZWRIZWFsIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYXN0U3BlbGwoc3VtbW9uZXIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXJldml2ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1bW1vbmVyID0gQUlTcGVsbC5yZXZpdmUoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGRlc2lyZWRTdW1tb25lcnMgPT0gdHJ1ZSBhbmQgc3VtbW9uZXIgfj0gbmlsIGFuZCBteUhlcm8uZGVhdGhUaW1lciA+IDI1IGFuZCAjQUlSb3V0aW5lLmZpbmRNYXRjaGVzKEFJRGF0YS5hbGxpZXMsZnVuY3Rpb24odGhpcykgcmV0dXJuIHRoaXMuZGVhZCA9PSBmYWxzZSBlbmQpICsgMSA+ICNBSVJvdXRpbmUuZmluZE1hdGNoZXMoQUlEYXRhLmVuZW1pZXMsZnVuY3Rpb24odGhpcykgcmV0dXJuIHRoaXMuZGVhZCA9PSBmYWxzZSBlbmQpIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhc3RTcGVsbChzdW1tb25lcikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLWNoZWNrIGZvciBpdGVtcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGl0ZW0gPSBBSVNwZWxsLmxvY2tldCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1sb2NrZXQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkZXNpcmVkSXRlbXMgPT0gdHJ1ZSBhbmQgaXRlbSB+PSBuaWwgYW5kIEFJUm91dGluZS5kaXN0YW5jZShteUhlcm8sQUlEYXRhLmFsbHlTcGF3bikgPiAxMDAwIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tc2F2ZSBTSElFTEQgcG93ZXINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGxvY2tldFBvd2VyID0gNTAgKyAobXlIZXJvLmxldmVsICogMTApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXNhdmUgcmVzdWx0IHZhcmlhYmxlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCByZXN1bHQgPSAwDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLWdldCBhbGxpZXMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFsbGllcyA9IEFJRmluZC5hbGxpZXMobXlIZXJvLDYwMCxmYWxzZSx0cnVlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgI2FsbGllcyA+IDEgdGhlbg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLWdldCBoZWFsIHJlc3VsdHMgb24gdGFyZ2V0cw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSA9IDEsICNhbGxpZXMsIDEgZG8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLWNhbGN1bGF0ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGFsbGllc1tpXS5tYXhIZWFsdGggLSBhbGxpZXNbaV0uaGVhbHRoID4gbG9ja2V0UG93ZXIgdGhlbiByZXN1bHQgPSByZXN1bHQgKyBtYXRoLm1heCgxLjUsLTEgKiBBSVN0YXQuaHBzKGFsbGllc1tpXSkgL2xvY2tldFBvd2VyKSBlbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tY2hlY2sgcmVzdWx0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHJlc3VsdC8jYWxsaWVzID49IGRlc2lyZWRIZWFsIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYXN0U3BlbGwoaXRlbSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQNCiAgICAgICAgICAgICAgICAgICAgZW5kKQ0KICAgICAgICAgICANCiAgICAgICAgICAgIA0KICAgICAgICAgICAgLS1ndWkNCiAgICAgICAgICAgIEFJQmluZC5rZXkoZGVzaXJlZEd1aUtleSxkcmF3R3VpLHJlbW92ZUd1aSkNCiAgICAgICAgICAgIC0td2VsY29tZSBtZXNzYWdlDQogICAgICAgICAgICBQcmludENoYXQoIjxmb250IGNvbG9yPVwiIzY2NjY2NlwiPjxiPnNvcmFrYUJPVCAtIFF1ZWVuIE9mIFRoZSBEYXJrIExvYWRlZCE8L2I+PC9mb250PiIpDQogICAgICAgICAgICAtLWxldmVsIHNwZWxscw0KICAgICAgICAgICAgQWRkQ3JlYXRlT2JqQ2FsbGJhY2soZnVuY3Rpb24ob2JqKSBpZiBkZXNpcmVkTGV2ZWwgPT0gdHJ1ZSBhbmQgb2JqLnggPT0gbXlIZXJvLnggYW5kIG9iai56ID09IG15SGVyby56IGFuZCBvYmoubmFtZSA9PSAiTGV2ZWxVcF9nbGIudHJveSIgdGhlbiBBSVNwZWxsLmxldmVsKHNwZWxscykgZW5kIGVuZCkNCiAgICAgICAgICAgIC0tc2xpZ2h0bHkgYnVnZ2VkDQogICAgICAgICAgICBpZiBkZXNpcmVkTGV2ZWwgPT0gdHJ1ZSBhbmQgc3BlbGxzIH49IG5pbCB0aGVuIEFJU3BlbGwubGV2ZWwoc3BlbGxzKSBlbmQNCmVuZA0KIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1HVUktLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICANCiAgICBndWlNZW51ID0gbmlsDQogICAgYWN0aW9uLGFjdGlvblRpbWVyLGJyYWluVGltZXIgPSBuaWwsbmlsDQogICAgZnVuY3Rpb24gZHJhd0d1aSgpDQogICAgICAgICAgICBpZiBndWlNZW51ID09IG5pbCB0aGVuDQogICAgICAgICAgICAgICAgICAgIGd1aU1lbnUgPSB7QUlHdWkudGV4dCgwLDAsInNvcmFrYUJPVCAtIFF1ZWVuIE9mIFRoZSBEYXJrIil9DQogICAgICAgICAgICAgICAgICAgIGd1aU1lbnVbI2d1aU1lbnUgKyAxXSA9IEFJR3VpLmxpbmUoMCwwLHtBSUd1aS50ZXh0KDAsMCwiQXV0byBIZWFsIHRpbGwgJWhwIiksQUlHdWkuc2xpZGVyKDAsMCxkZXNpcmVkSGVhbCAqIDEwMCwwLDExMCxmdW5jdGlvbihudW0pIGRlc2lyZWRIZWFsID0gbnVtLzEwMCBlbmQpfSkNCiAgICAgICAgICAgICAgICAgICAgZ3VpTWVudVsjZ3VpTWVudSArIDFdID0gQUlHdWkubGluZSgwLDAse0FJR3VpLnRleHQoMCwwLCJBdXRvIFVsdGltYXRlIHRpbGwgJWhwIiksQUlHdWkuc2xpZGVyKDAsMCxkZXNpcmVkVWx0ICogMTAwLDAsMTEwLGZ1bmN0aW9uKG51bSkgZGVzaXJlZFVsdCA9IG51bS8xMDAgZW5kKX0pDQogICAgICAgICAgICAgICAgICAgIGd1aU1lbnVbI2d1aU1lbnUgKyAxXSA9IEFJR3VpLmxpbmUoMCwwLHtBSUd1aS50aWNrKDAsMCxkZXNpcmVkTGV2ZWwsZnVuY3Rpb24oc3RhdGUpIGRlc2lyZWRMZXZlbCA9IHN0YXRlIGlmIHN0YXRlID09IHRydWUgYW5kIHNwZWxscyB+PSBuaWwgdGhlbiBBSVNwZWxsLmxldmVsKHNwZWxscykgZW5kIGVuZCksQUlHdWkudGV4dCgwLDAsIkF1dG8gTFZMIFNraWxscyAoRml4ZWQpIil9KQ0KICAgICAgICAgICAgICAgICAgICBndWlNZW51WyNndWlNZW51ICsgMV0gPSBBSUd1aS5saW5lKDAsMCx7QUlHdWkudGV4dCgwLDAsdmVyc2lvbixmdW5jdGlvbihzdGF0ZSkgdmVyc2lvbiA9IHN0YXRlIGVuZCksQUlHdWkudGV4dCgwLDAsIlZlcnNpb24iKX0pDQoJCQkJCWd1aU1lbnUgPSBBSUd1aS5saXN0KFdJTkRPV19XKjAuNCxXSU5ET1dfSCowLjMsZ3VpTWVudSkNCiAgICAgICAgICAgIGVuZA0KICAgIGVuZA0KICAgIGZ1bmN0aW9uIHJlbW92ZUd1aSgpDQogICAgICAgICAgICBpZiBndWlNZW51IH49IG5pbCB0aGVuDQogICAgICAgICAgICAgICAgICAgIEFJR3VpLnJlbW92ZShndWlNZW51KQ0KICAgICAgICAgICAgICAgICAgICBndWlNZW51ID0gbmlsDQogICAgICAgICAgICBlbmQNCiAgICBlbmQNCg0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgLS0tLS0tLS0tLS0tLS0tLS0tc3BlbGwgYWN0aW9uLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICBmdW5jdGlvbiBPblByb2Nlc3NTcGVsbCh1bml0LCBzcGVsbCkNCiAgICAgICAgICAgIGlmIG15SGVyby5kZWFkID09IHRydWUgb3IgdW5pdCA9PSBuaWwgb3IgdW5pdC52YWxpZCA9PSBmYWxzZSBvciB1bml0LnRlYW0gfj0gVEVBTV9FTkVNWSB0aGVuIHJldHVybg0KICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tc2lsZW5jZS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgICAgICAtLWNoZWNrIGlzIGl0IGVuZW15IGFuZCBpcyBzaWxlbmNlIHVzYWJsZQ0KICAgICAgICAgICAgZWxzZWlmIENhblVzZVNwZWxsKF9FKSA9PSBSRUFEWSBhbmQgQUlSb3V0aW5lLmRpc3RhbmNlKG15SGVybyx1bml0KSA8PSA3NTAgIHRoZW4NCiAgICAgICAgICAgICAgICAgICAgLS1jaGVjayBpcyBzcGVsbCBpbXBvcnRhbnQNCiAgICAgICAgICAgICAgICAgICAgaWYgIHNwZWxsLm5hbWU9PSJLYXRhcmluYVIiIG9yIHNwZWxsLm5hbWU9PSJHYWxpb0lkb2xPZkR1cmFuZCIgb3Igc3BlbGwubmFtZT09IkNyb3dzdG9ybSIgb3Igc3BlbGwubmFtZT09IkRyYWluQ2hhbm5lbCINCiAgICAgICAgICAgICAgICAgICAgb3Igc3BlbGwubmFtZT09IkFic29sdXRlWmVybyIgb3Igc3BlbGwubmFtZT09IlNoZW5TdGFuZFVuaXRlZCIgb3Igc3BlbGwubmFtZT09IlVyZ290U3dhcDIiIG9yIHNwZWxsLm5hbWU9PSJBbFphaGFyTmV0aGVyR3Jhc3AiDQogICAgICAgICAgICAgICAgICAgIG9yIHNwZWxsLm5hbWU9PSJGYWxsZW5PbmUiIG9yIHNwZWxsLm5hbWU9PSJQYW50aGVvbl9HcmFuZFNreWZhbGxfSnVtcCIgb3Igc3BlbGwubmFtZT09IkNhaXRseW5BY2VpbnRoZUhvbGUiDQogICAgICAgICAgICAgICAgICAgIG9yIHNwZWxsLm5hbWU9PSJNaXNzRm9ydHVuZUJ1bGxldFRpbWUiIG9yIHNwZWxsLm5hbWU9PSJJbmZpbml0ZUR1cmVzcyIgb3Igc3BlbGwubmFtZT09IlRlbGVwb3J0Ig0KICAgICAgICAgICAgICAgICAgICB0aGVuIENhc3RTcGVsbChfRSx1bml0KSBlbmQNCiAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KICAgICAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tb2htd3JlY2tlci0tLS0tLS0tLS0tLS0tLS0tDQogICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCiAgICAgICAgICAgIGVsc2VpZiBkZXNpcmVkSXRlbXMgPT0gdHJ1ZSBhbmQgdW5pdC50eXBlID09ICJvYmpfQUlfVHVycmV0IiBhbmQgdW5pdC50ZWFtID09IFRFQU1fRU5FTVkgYW5kIEFJUm91dGluZS5kaXN0YW5jZShteUhlcm8sdW5pdCkgPCA2MDAgdGhlbg0KICAgICAgICAgICAgICAgICAgICBsb2NhbCBpdGVtID0gQUlTcGVsbC5vaG0oKQ0KICAgICAgICAgICAgICAgICAgICBpZiBpdGVtIH49IG5pbCBhbmQgQUlGaW5kLmFsbHkoc3BlbGwuZW5kUG9zLDMwLHRydWUsdHJ1ZSkgfj0gbmlsIHRoZW4gQ2FzdFNwZWxsKGl0ZW0pIGVuZA0KICAgICAgICAgICAgZW5kDQogICAgZW5kDQoNCmZ1bmN0aW9uIE9uQnVnc3BsYXQoKQ0KCVVwZGF0ZVdlYihmYWxzZSwgU2NyaXB0TmFtZSwgaWQsIEhXSUQpDQplbmQNCg0KZnVuY3Rpb24gT25VbmxvYWQoKQ0KCVVwZGF0ZVdlYihmYWxzZSwgU2NyaXB0TmFtZSwgaWQsIEhXSUQpDQplbmQNCg0KZnVuY3Rpb24gd2FyZFVwZGF0ZSgpDQpmb3IgaSA9IDEsIDEyIGRvDQp3YXJkRGV0ZWN0ZWRGbGFnW2ldID0gZmFsc2UNCmVuZA0KZm9yIGsgPSAxLCBvYmpNYW5hZ2VyLm1heE9iamVjdHMgZG8NCmxvY2FsIG9iamVjdCA9IG9iak1hbmFnZXI6R2V0T2JqZWN0KGspDQppZiBvYmplY3Qgfj0gbmlsIGFuZCAoc3RyaW5nLmZpbmQob2JqZWN0Lm5hbWUsICJXYXJkIikgfj0gbmlsIG9yIHN0cmluZy5maW5kKG9iamVjdC5uYW1lLCAiV3JpZ2dsZSIpIH49IG5pbCkgdGhlbg0KZm9yIGkgPSAxLCAxMiBkbw0KaWYgbWF0aC5zcXJ0KCh3YXJkTWF0cml4WzFdW2ldIC0gb2JqZWN0LngpKih3YXJkTWF0cml4WzFdW2ldIC0gb2JqZWN0LngpICsgKHdhcmRNYXRyaXhbMl1baV0gLSBvYmplY3QueikqKHdhcmRNYXRyaXhbMl1baV0gLSBvYmplY3QueikpIDwgMTEwMCB0aGVuDQp3YXJkRGV0ZWN0ZWRGbGFnW2ldID0gdHJ1ZQ0Kd2FyZE1hdHJpeFszXVtpXSA9IHRydWUNCmVuZA0KZW5kDQplbmQNCmZvciBpID0gMSwgMTIgZG8NCmlmIHdhcmREZXRlY3RlZEZsYWdbaV0gPT0gZmFsc2UgdGhlbg0Kd2FyZE1hdHJpeFszXVtpXSA9IGZhbHNlDQplbmQNCmVuZA0KZW5kDQp3YXJkVGltZXIgPSBHZXRUaWNrQ291bnQoKQ0KZW5k="), nil, "bt", _ENV))()
